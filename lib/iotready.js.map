{"version":3,"sources":["../src/iotready.js"],"names":["iotready","options","Defaults","context","agent","Agent","baseUrl","name","undefined","_isValidContext","Error","username","password","tokenDuration","request","uri","form","grant_type","client_id","clientId","client_secret","clientSecret","expires_in","method","email","product","deviceId","deviceName","groups","sortAttr","sortDir","page","perPage","auth","query","Array","isArray","join","per_page","get","deviceUri","requestTransfer","post","id","request_transfer","file","files","data","delete","updateDevice","signal","notes","development","desiredFirmwareVersion","flash","desired_firmware_version","put","iccid","argument","args","org","toLowerCase","encodeURIComponent","EventStream","connect","isPrivate","postData","private","_buildContext","head","prototype","removeAccessToken","deleteAccessToken"],"mappings":"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","file":"iotready.js","sourcesContent":["import Defaults from './Defaults';\nimport EventStream from './EventStream';\nimport Agent from './Agent';\n\n/**\n * iotready Cloud API wrapper.\n *\n * Most iotready methods take a single unnamed argument object documented as\n * `options` with key/value pairs for each option.\n */\nclass iotready {\n\t/**\n\t * Contructor for the Cloud API wrapper.\n\t *\n\t * Create a new iotready object and call methods below on it.\n\t *\n\t * @param  {Object} options Options for this API call Options to be used for all requests (see [Defaults](../src/Defaults.js))\n\t */\n\tconstructor(options = {}){\n\t\t// todo - this seems a bit dangerous - would be better to put all options/context in a contained object\n\t\tObject.assign(this, Defaults, options);\n\t\tthis.context = {};\n\t\tthis.agent = new Agent(this.baseUrl);\n\t}\n\n\t_isValidContext(name, context){\n\t\treturn (name==='tool' || name==='project') && context!==undefined;\n\t}\n\n\tsetContext(name, context){\n\t\tif (context!==undefined){\n\t\t\tif (this._isValidContext(name, context)){\n\t\t\t\tthis.context[name] = context;\n\t\t\t} else {\n\t\t\t\tthrow Error('uknown context name or undefined context: '+name);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Builds the final context from the context parameter and the context items in the api.\n\t * @param  {Object} context       The invocation context, this takes precedence over the local context.\n\t * @returns {Object} The context to use.\n\t * @private\n\t */\n\t_buildContext(context){\n\t\treturn Object.assign(this.context, context);\n\t}\n\n\t/**\n\t * Login to iotready Cloud using an existing iotready acccount.\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.username      Username for the iotready account\n\t * @param  {String} options.password      Password for the iotready account\n\t * @param  {Number} options.tokenDuration How long the access token should last in seconds\n\t * @returns {Promise} A promise\n\t */\n\tlogin({ username, password, tokenDuration = this.tokenDuration, context }){\n\t\treturn this.request({ uri: '/oauth/token', form: {\n\t\t\tusername,\n\t\t\tpassword,\n\t\t\tgrant_type: 'password',\n\t\t\tclient_id: this.clientId,\n\t\t\tclient_secret: this.clientSecret,\n\t\t\texpires_in: tokenDuration\n\t\t}, method: 'post', context });\n\t}\n\n\t/**\n\t * Create Customer for Product.\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.email         Username for the iotready account\n\t * @param  {String} options.password      Password for the iotready account\n\t * @param  {String} options.product       Create the customer in this product ID or slug\n\t * @returns {Promise} A promise\n\t */\n\tcreateCustomer({ email, password, product, context }){\n\t\tconst uri =`/v1/products/${product}/customers`;\n\t\treturn this.request({ uri: uri, form: {\n\t\t\temail,\n\t\t\tpassword,\n\t\t\tgrant_type: 'client_credentials',\n\t\t\tclient_id: this.clientId,\n\t\t\tclient_secret: this.clientSecret\n\t\t}, method: 'post', context });\n\t}\n\n\t/**\n\t * Login to iotready Cloud using an OAuth client.\n\t * @param  {Object} options Options for this API call\n\t * @param  {Object} options.context   Context information.\n\t * @returns {Promise} A promise\n\t */\n\tloginAsClientOwner({ context }){\n\t\treturn this.request({ uri: '/oauth/token', form: {\n\t\t\tgrant_type: 'client_credentials',\n\t\t\tclient_id: this.clientId,\n\t\t\tclient_secret: this.clientSecret\n\t\t}, method: 'post', context });\n\t}\n\n\t/**\n\t * List devices claimed to the account or product\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} [options.deviceId]   (Product only) Filter results to devices with this ID (partial matching)\n\t * @param  {String} [options.deviceName] (Product only) Filter results to devices with this name (partial matching)\n\t * @param  {Array.<string>} [options.groups]   (Product only) A list of full group names to filter results to devices belonging to these groups only.\n\t * @param  {String} [options.sortAttr]   (Product only) The attribute by which to sort results. See API docs for options.\n\t * @param  {String} [options.sortDir]    (Product only) The direction of sorting. See API docs for options.\n\t * @param  {Number} [options.page]       (Product only) Current page of results\n\t * @param  {Number} [options.perPage]    (Product only) Records per page\n\t * @param  {String} [options.product]    List devices in this product ID or slug\n\t * @param  {String} options.auth         Access Token\n\t * @returns {Promise} A promise\n\t */\n\tlistDevices({ deviceId, deviceName, groups, sortAttr, sortDir, page, perPage, product, auth, context }){\n\t\tlet uri, query;\n\n\t\tif (product){\n\t\t\turi = `/v1/products/${product}/devices`;\n\t\t\tgroups = Array.isArray(groups) ? groups.join(',') : undefined;\n\t\t\tquery = { deviceId, deviceName, groups, sortAttr, sortDir, page, per_page: perPage };\n\t\t} else {\n\t\t\turi = '/v1/devices';\n\t\t}\n\n\t\treturn this.get(uri, auth, query, context);\n\t}\n\n\t/**\n\t * Get detailed informationa about a device\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId  Device ID or Name\n\t * @param  {String} [options.product] Device in this product ID or slug\n\t * @param  {String} options.auth      Access token\n\t * @returns {Promise} A promise\n\t */\n\tgetDevice({ deviceId, product, auth, context }){\n\t\tconst uri = this.deviceUri({ deviceId, product });\n\t\treturn this.get(uri, auth, undefined, context);\n\t}\n\n\t/**\n\t * Claim a device to the account. The device must be online and unclaimed.\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID\n\t * @param  {String} options.auth     Access Token\n\t * @returns {Promise} A promise\n\t */\n\tclaimDevice({ deviceId, requestTransfer, auth, context }){\n\t\treturn this.post('/v1/devices', {\n\t\t\tid: deviceId,\n\t\t\trequest_transfer: !!requestTransfer\n\t\t}, auth, context);\n\t}\n\n\t/**\n\t * Add a device to a product or move device out of quarantine.\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID\n\t * @param  {Object} options.file    A file that contains a single-column list of device IDs, device serial numbers, device IMEIs, or devie ICCIDs.\n\t *                                  Node: Either a path or Buffer. Browser: a File or Blob.\n\t * @param  {String} options.product  Add to this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @returns {Promise} A promise\n\t */\n\taddDeviceToProduct({ deviceId, product, file, auth, context }){\n\t\tlet files, data;\n\n\t\tif (file){\n\t\t\tfiles = { file };\n\t\t} else if (deviceId){\n\t\t\tdata = { id: deviceId };\n\t\t}\n\n\t\treturn this.request({\n\t\t\turi: `/v1/products/${product}/devices`,\n\t\t\tmethod: 'post',\n\t\t\tdata,\n\t\t\tfiles,\n\t\t\tauth,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Unclaim / Remove a device from your account or product, or deny quarantine\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID or Name\n\t * @param  {String} options.product  Remove from this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @returns {Promise} A promise\n\t */\n\tremoveDevice({ deviceId, product, auth, context }){\n\t\tconst uri = this.deviceUri({ deviceId, product });\n\t\treturn this.delete(uri, undefined, auth, context);\n\t}\n\n\t/**\n\t * Unclaim a product device its the owner, but keep it in the product\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID or Name\n\t * @param  {String} options.product  Remove from this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @returns {Promise} A promise\n\t */\n\tremoveDeviceOwner({ deviceId, product, auth, context }){\n\t\tconst uri = `/v1/products/${product}/devices/${deviceId}/owner`;\n\t\treturn this.delete(uri, undefined, auth, context);\n\t}\n\n\t/**\n\t * Rename a device\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID or Name\n\t * @param  {String} options.name     Desired Name\n\t * @param  {String} [options.product] Rename device in this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @returns {Promise} A promise\n\t */\n\trenameDevice({ deviceId, name, product, auth, context }){\n\t\treturn this.updateDevice({ deviceId, name, product, auth, context });\n\t}\n\n\t/**\n\t * Instruct the device to turn on/off the LED in a rainbow pattern\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID or Name\n\t * @param  {Boolean} options.signal   Signal on or off\n\t * @param  {String} [options.product] Device in this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @returns {Promise} A promise\n\t */\n\tsignalDevice({ deviceId, signal, product, auth, context }){\n\t\treturn this.updateDevice({ deviceId, signal, product, auth, context });\n\t}\n\n\t/**\n\t * Store some notes about device\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId  Device ID or Name\n\t * @params {String} options.notes     Your notes about this device\n\t * @param  {String} [options.product] Device in this product ID or slug\n\t * @param  {String} options.auth      Access Token\n\t * @returns {Promise} A promise\n\t */\n\tsetDeviceNotes({ deviceId, notes, product, auth, context }){\n\t\treturn this.updateDevice({ deviceId, notes, product, auth, context });\n\t}\n\n\t/**\n\t * Update multiple device attributes at the same time\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId       Device ID or Name\n\t * @param  {String} [options.name]         Desired Name\n\t * @param  {Boolean} options.signal        Signal device on or off\n\t * @params {String} [options.notes]        Your notes about this device\n\t * @param  {Boolean} [options.development] (Product only) Set to true to mark as development, false to return to product fleet\n\t * @params {Number} [options.desiredFirmwareVersion] (Product only) Lock the product device to run this firmware version.\n\t *                                              Pass `null` to unlock firmware and go back to released firmware.\n\t * @params {Boolean} [options.flash]       (Product only) Immediately flash firmware indicated by desiredFirmwareVersion\n\t * @param  {String} [options.product]      Device in this product ID or slug\n\t * @param  {String} options.auth           Access Token\n\t * @returns {Promise} A promise\n\t */\n\tupdateDevice({ deviceId, name, signal, notes, development, desiredFirmwareVersion, flash, product, auth, context }){\n\t\tif (signal !== undefined){\n\t\t\tsignal = signal ? '1' : '0';\n\t\t}\n\n\t\tconst uri = this.deviceUri({ deviceId, product });\n\t\tconst data = product ?\n\t\t\t{ name, signal, notes, development, desired_firmware_version: desiredFirmwareVersion, flash } :\n\t\t\t{ name, signal, notes };\n\t\treturn this.put(uri, data, auth, context);\n\t}\n\n\t/**\n\t * Generate a claim code to use in the device claiming process.\n\t * To generate a claim code for a product, the access token MUST belong to a\n\t * customer of the product.\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} [options.iccid] ICCID of the SIM card used in the Electron\n\t * @param  {String} [options.product] Device in this product ID or slug\n\t * @param  {String} options.auth  Access Token\n\t * @returns {Promise} A promise\n\t */\n\tgetClaimCode({ iccid, product, auth, context }){\n\t\tconst uri = product ? `/v1/products/${product}/device_claims` : '/v1/device_claims';\n\t\treturn this.post(uri, { iccid }, auth, context);\n\t}\n\n\t/**\n\t * Get the value of a device variable\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID or Name\n\t * @param  {String} options.name     Variable name\n\t * @param  {String} [options.product] Device in this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @returns {Promise} A promise\n\t */\n\tget({ deviceId, name, product, auth, context }){\n\t\tconst uri = product ?\n\t\t\t`/v1/products/${product}/devices/${deviceId}/${name}` :\n\t\t\t`/v1/devices/${deviceId}/${name}`;\n\t\treturn this.get(uri, auth, undefined, context);\n\t}\n\n\t/**\n\t * Call a device function\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID or Name\n\t * @param  {String} options.name     Function name\n\t * @param  {String} options.argument Function argument\n\t * @param  {String} [options.product] Device in this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @returns {Promise} A promise\n\t */\n\tpost({ deviceId, name, argument, product, auth, context }){\n\t\tconst uri = product ?\n\t\t\t`/v1/products/${product}/devices/${deviceId}/${name}` :\n\t\t\t`/v1/devices/${deviceId}/${name}`;\n\t\treturn this.post(uri, { args: argument }, auth, context);\n\t}\n\n\t/**\n\t * Get a stream of events\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} [options.deviceId] Device ID or Name, or `mine` to indicate only your devices.\n\t * @param  {String} [options.name]     Event Name\n\t * @param  {String} [options.org]     Organization Slug\n\t * @param  {String} [options.product] Events for this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @returns {Promise} If the promise resolves, the resolution value will be an EventStream object that will\n\t * emit 'event' events.\n\t */\n\tgetEventStream({ deviceId, name, org, product, auth }){\n\t\tlet uri = '/v1/';\n\t\tif (org){\n\t\t\turi += `orgs/${org}/`;\n\t\t}\n\n\t\tif (product){\n\t\t\turi += `products/${product}/`;\n\t\t}\n\n\t\tif (deviceId){\n\t\t\turi += 'devices/';\n\t\t\tif (!(deviceId.toLowerCase() === 'mine')){\n\t\t\t\turi += `${deviceId}/`;\n\t\t\t}\n\t\t}\n\n\t\turi += 'events';\n\n\t\tif (name){\n\t\t\turi += `/${encodeURIComponent(name)}`;\n\t\t}\n\n\t\treturn new EventStream(`${this.baseUrl}${uri}`, auth).connect();\n\t}\n\n\t/**\n\t * Publish a event to the iotready Cloud\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.name      Event name\n\t * @param  {String} options.data      Event data\n\t * @param  {Boolean} options.isPrivate Should the event be publicly available?\n\t * @param  {String} [options.product]  Event for this product ID or slug\n\t * @param  {String} options.auth      Access Token\n\t * @returns {Promise} A promise\n\t */\n\tpublishEvent({ name, data, isPrivate, product, auth, context }){\n\t\tconst uri = product ? `/v1/products/${product}/events` : '/v1/devices/events';\n\t\tconst postData = { name, data, private: isPrivate };\n\t\treturn this.post(uri, postData, auth, context);\n\t}\n\n\t/**\n\t * List products the account has access to\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.auth Access Token\n\t * @returns {Promise} A promise\n\t */\n\tlistProducts({ auth, context }){\n\t\treturn this.get('/v1/products', auth, undefined, context);\n\t}\n\n\t/**\n\t * Get detailed information about a product\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.product  Product ID or slug\n\t * @param  {String} options.auth     Access token\n\t * @returns {Promise} A promise\n\t */\n\tgetProduct({ product, auth, context }){\n\t\treturn this.get(`/v1/products/${product}`, auth, undefined, context);\n\t}\n\n\t/**\n\t * API URI to access a device\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId  Device ID to access\n\t * @param  {String} [options.product] Device only in this product ID or slug\n\t * @private\n\t * @returns {string} URI\n\t */\n\tdeviceUri({ deviceId, product }){\n\t\treturn product ? `/v1/products/${product}/devices/${deviceId}` : `/v1/devices/${deviceId}`;\n\t}\n\n\tget(uri, auth, query, context){\n\t\tcontext = this._buildContext(context);\n\t\treturn this.agent.get(uri, auth, query, context);\n\t}\n\n\thead(uri, auth, query, context){\n\t\tcontext = this._buildContext(context);\n\t\treturn this.agent.head(uri, auth, query, context);\n\t}\n\n\tpost(uri, data, auth, context){\n\t\tcontext = this._buildContext(context);\n\t\treturn this.agent.post(uri, data, auth, context);\n\t}\n\n\tput(uri, data, auth, context){\n\t\tcontext = this._buildContext(context);\n\t\treturn this.agent.put(uri, data, auth, context);\n\t}\n\n\tdelete(uri, data, auth, context){\n\t\tcontext = this._buildContext(context);\n\t\treturn this.agent.delete(uri, data, auth, context);\n\t}\n\n\trequest(args){\n\t\targs.context = this._buildContext(args.context);\n\t\treturn this.agent.request(args);\n\t}\n}\n\n// Aliases for backwards compatibility\niotready.prototype.removeAccessToken = iotready.prototype.deleteAccessToken;\n\nexport default iotready;\n"]}